

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Mar 20 15:31:32 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text4,local,class=CODE,merge=1,delta=2
    13                           	psect	text5,local,class=CODE,merge=1,delta=2
    14                           	dabs	1,0x7E,2
    15  0000                     
    16                           ; Version 2.20
    17                           ; Generated 12/02/2020 GMT
    18                           ; 
    19                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution.
    33                           ; 
    34                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    35                           ;        software without specific prior written permission.
    36                           ; 
    37                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    38                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    39                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    40                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    41                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    42                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    43                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    44                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    45                           ; 
    46                           ; 
    47                           ; Code-generator required, PIC16F887 Definitions
    48                           ; 
    49                           ; SFR Addresses
    50  0000                     	;# 
    51  0001                     	;# 
    52  0002                     	;# 
    53  0003                     	;# 
    54  0004                     	;# 
    55  0005                     	;# 
    56  0006                     	;# 
    57  0007                     	;# 
    58  0008                     	;# 
    59  0009                     	;# 
    60  000A                     	;# 
    61  000B                     	;# 
    62  000C                     	;# 
    63  000D                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0013                     	;# 
    71  0014                     	;# 
    72  0015                     	;# 
    73  0015                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001B                     	;# 
    81  001C                     	;# 
    82  001D                     	;# 
    83  001E                     	;# 
    84  001F                     	;# 
    85  0081                     	;# 
    86  0085                     	;# 
    87  0086                     	;# 
    88  0087                     	;# 
    89  0088                     	;# 
    90  0089                     	;# 
    91  008C                     	;# 
    92  008D                     	;# 
    93  008E                     	;# 
    94  008F                     	;# 
    95  0090                     	;# 
    96  0091                     	;# 
    97  0092                     	;# 
    98  0093                     	;# 
    99  0093                     	;# 
   100  0093                     	;# 
   101  0094                     	;# 
   102  0095                     	;# 
   103  0096                     	;# 
   104  0097                     	;# 
   105  0098                     	;# 
   106  0099                     	;# 
   107  009A                     	;# 
   108  009B                     	;# 
   109  009C                     	;# 
   110  009D                     	;# 
   111  009E                     	;# 
   112  009F                     	;# 
   113  0105                     	;# 
   114  0107                     	;# 
   115  0108                     	;# 
   116  0109                     	;# 
   117  010C                     	;# 
   118  010C                     	;# 
   119  010D                     	;# 
   120  010E                     	;# 
   121  010F                     	;# 
   122  0185                     	;# 
   123  0187                     	;# 
   124  0188                     	;# 
   125  0189                     	;# 
   126  018C                     	;# 
   127  018D                     	;# 
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  000E                     	;# 
   144  000F                     	;# 
   145  0010                     	;# 
   146  0011                     	;# 
   147  0012                     	;# 
   148  0013                     	;# 
   149  0014                     	;# 
   150  0015                     	;# 
   151  0015                     	;# 
   152  0016                     	;# 
   153  0017                     	;# 
   154  0018                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001B                     	;# 
   159  001C                     	;# 
   160  001D                     	;# 
   161  001E                     	;# 
   162  001F                     	;# 
   163  0081                     	;# 
   164  0085                     	;# 
   165  0086                     	;# 
   166  0087                     	;# 
   167  0088                     	;# 
   168  0089                     	;# 
   169  008C                     	;# 
   170  008D                     	;# 
   171  008E                     	;# 
   172  008F                     	;# 
   173  0090                     	;# 
   174  0091                     	;# 
   175  0092                     	;# 
   176  0093                     	;# 
   177  0093                     	;# 
   178  0093                     	;# 
   179  0094                     	;# 
   180  0095                     	;# 
   181  0096                     	;# 
   182  0097                     	;# 
   183  0098                     	;# 
   184  0099                     	;# 
   185  009A                     	;# 
   186  009B                     	;# 
   187  009C                     	;# 
   188  009D                     	;# 
   189  009E                     	;# 
   190  009F                     	;# 
   191  0105                     	;# 
   192  0107                     	;# 
   193  0108                     	;# 
   194  0109                     	;# 
   195  010C                     	;# 
   196  010C                     	;# 
   197  010D                     	;# 
   198  010E                     	;# 
   199  010F                     	;# 
   200  0185                     	;# 
   201  0187                     	;# 
   202  0188                     	;# 
   203  0189                     	;# 
   204  018C                     	;# 
   205  018D                     	;# 
   206  0008                     _PORTD	set	8
   207  0007                     _PORTC	set	7
   208  003E                     _RC6	set	62
   209  003D                     _RC5	set	61
   210  003F                     _RC7	set	63
   211  003A                     _RC2	set	58
   212  0039                     _RC1	set	57
   213  0038                     _RC0	set	56
   214  0088                     _TRISD	set	136
   215  0087                     _TRISC	set	135
   216                           
   217                           	psect	cinit
   218  07F4                     start_initialization:	
   219                           ; #config settings
   220                           
   221  07F4                     __initialization:
   222                           
   223                           ; Clear objects allocated to BANK0
   224  07F4  1283               	bcf	3,5	;RP0=0, select bank0
   225  07F5  1303               	bcf	3,6	;RP1=0, select bank0
   226  07F6  01A0               	clrf	__pbssBANK0& (0+127)
   227  07F7  01A1               	clrf	(__pbssBANK0+1)& (0+127)
   228  07F8  01A2               	clrf	(__pbssBANK0+2)& (0+127)
   229  07F9  01A3               	clrf	(__pbssBANK0+3)& (0+127)
   230  07FA  01A4               	clrf	(__pbssBANK0+4)& (0+127)
   231  07FB  01A5               	clrf	(__pbssBANK0+5)& (0+127)
   232  07FC                     end_of_initialization:	
   233                           ;End of C runtime variable initialization code
   234                           
   235  07FC                     __end_of__initialization:
   236  07FC  0183               	clrf	3
   237  07FD  120A  118A  2F4E   	ljmp	_main	;jump to C main() function
   238                           
   239                           	psect	bssBANK0
   240  0020                     __pbssBANK0:
   241  0020                     _total:
   242  0020                     	ds	2
   243  0022                     _count1:
   244  0022                     	ds	2
   245  0024                     _count:
   246  0024                     	ds	2
   247                           
   248                           	psect	cstackCOMMON
   249  0070                     __pcstackCOMMON:
   250  0070                     ?_main:
   251  0070                     ?_pulse:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ??_pulse:	
   255                           ; 1 bytes @ 0x0
   256                           
   257  0070                     ?___awdiv:	
   258                           ; 1 bytes @ 0x0
   259                           
   260  0070                     ?___awmod:	
   261                           ; 2 bytes @ 0x0
   262                           
   263  0070                     ___awdiv@divisor:	
   264                           ; 2 bytes @ 0x0
   265                           
   266  0070                     ___awmod@divisor:	
   267                           ; 2 bytes @ 0x0
   268                           
   269                           
   270                           ; 2 bytes @ 0x0
   271  0070                     	ds	2
   272  0072                     ___awdiv@dividend:
   273  0072                     ___awmod@dividend:	
   274                           ; 2 bytes @ 0x2
   275                           
   276                           
   277                           ; 2 bytes @ 0x2
   278  0072                     	ds	2
   279  0074                     ??___awdiv:
   280  0074                     ??___awmod:	
   281                           ; 1 bytes @ 0x4
   282                           
   283                           
   284                           ; 1 bytes @ 0x4
   285  0074                     	ds	1
   286  0075                     ___awdiv@counter:
   287  0075                     ___awmod@counter:	
   288                           ; 1 bytes @ 0x5
   289                           
   290                           
   291                           ; 1 bytes @ 0x5
   292  0075                     	ds	1
   293  0076                     ___awdiv@sign:
   294  0076                     ___awmod@sign:	
   295                           ; 1 bytes @ 0x6
   296                           
   297                           
   298                           ; 1 bytes @ 0x6
   299  0076                     	ds	1
   300  0077                     ___awdiv@quotient:
   301                           
   302                           ; 2 bytes @ 0x7
   303  0077                     	ds	2
   304  0079                     ?_LCD:
   305  0079                     LCD@g:	
   306                           ; 1 bytes @ 0x9
   307                           
   308                           
   309                           ; 2 bytes @ 0x9
   310  0079                     	ds	2
   311  007B                     LCD@h:
   312                           
   313                           ; 2 bytes @ 0xB
   314  007B                     	ds	2
   315  007D                     ??_LCD:
   316  007D                     ??_display:	
   317                           ; 1 bytes @ 0xD
   318                           
   319  007D                     ??_main:	
   320                           ; 1 bytes @ 0xD
   321                           
   322                           
   323                           	psect	cstackBANK0
   324  0026                     __pcstackBANK0:	
   325                           ; 1 bytes @ 0xD
   326                           
   327  0026                     ?_display:
   328  0026                     display@a:	
   329                           ; 1 bytes @ 0x0
   330                           
   331                           
   332                           ; 2 bytes @ 0x0
   333  0026                     	ds	2
   334                           
   335                           	psect	maintext
   336  074E                     __pmaintext:	
   337 ;;
   338 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   339 ;;
   340 ;; *************** function _main *****************
   341 ;; Defined at:
   342 ;;		line 21 in file "LCD USING INPUT.c"
   343 ;; Parameters:    Size  Location     Type
   344 ;;		None
   345 ;; Auto vars:     Size  Location     Type
   346 ;;		None
   347 ;; Return value:  Size  Location     Type
   348 ;;                  1    wreg      void 
   349 ;; Registers used:
   350 ;;		wreg, status,2, status,0, pclath, cstack
   351 ;; Tracked objects:
   352 ;;		On entry : B00/0
   353 ;;		On exit  : 0/0
   354 ;;		Unchanged: 0/0
   355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   356 ;;      Params:         0       0       0       0       0
   357 ;;      Locals:         0       0       0       0       0
   358 ;;      Temps:          0       0       0       0       0
   359 ;;      Totals:         0       0       0       0       0
   360 ;;Total ram usage:        0 bytes
   361 ;; Hardware stack levels required when called: 3
   362 ;; This function calls:
   363 ;;		_LCD
   364 ;;		_display
   365 ;; This function is called by:
   366 ;;		Startup code after reset
   367 ;; This function uses a non-reentrant model
   368 ;;
   369                           
   370                           
   371                           ;psect for function _main
   372  074E                     _main:
   373  074E                     l877:	
   374                           ;incstack = 0
   375                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   376                           
   377                           
   378                           ;LCD USING INPUT.c: 23:     TRISC=0X07;
   379  074E  3007               	movlw	7
   380  074F  1683               	bsf	3,5	;RP0=1, select bank1
   381  0750  1303               	bcf	3,6	;RP1=0, select bank1
   382  0751  0087               	movwf	7	;volatile
   383  0752                     l879:
   384                           
   385                           ;LCD USING INPUT.c: 24:     PORTC=0X00;
   386  0752  1283               	bcf	3,5	;RP0=0, select bank0
   387  0753  1303               	bcf	3,6	;RP1=0, select bank0
   388  0754  0187               	clrf	7	;volatile
   389  0755                     l881:
   390                           
   391                           ;LCD USING INPUT.c: 25:     TRISD=0X00;
   392  0755  1683               	bsf	3,5	;RP0=1, select bank1
   393  0756  1303               	bcf	3,6	;RP1=0, select bank1
   394  0757  0188               	clrf	8	;volatile
   395  0758                     l883:
   396                           
   397                           ;LCD USING INPUT.c: 26:     PORTD=0X00;
   398  0758  1283               	bcf	3,5	;RP0=0, select bank0
   399  0759  1303               	bcf	3,6	;RP1=0, select bank0
   400  075A  0188               	clrf	8	;volatile
   401  075B                     l885:
   402                           
   403                           ;LCD USING INPUT.c: 27:     LCD(0x38,0);
   404  075B  3038               	movlw	56
   405  075C  00F9               	movwf	LCD@g
   406  075D  3000               	movlw	0
   407  075E  00FA               	movwf	LCD@g+1
   408  075F  3000               	movlw	0
   409  0760  00FB               	movwf	LCD@h
   410  0761  00FC               	movwf	LCD@h+1
   411  0762  120A  118A  2619  120A  118A  	fcall	_LCD
   412  0767                     l887:
   413                           
   414                           ;LCD USING INPUT.c: 28:     LCD(0X0E,0);
   415  0767  300E               	movlw	14
   416  0768  00F9               	movwf	LCD@g
   417  0769  3000               	movlw	0
   418  076A  00FA               	movwf	LCD@g+1
   419  076B  3000               	movlw	0
   420  076C  00FB               	movwf	LCD@h
   421  076D  00FC               	movwf	LCD@h+1
   422  076E  120A  118A  2619  120A  118A  	fcall	_LCD
   423  0773                     l889:
   424                           
   425                           ;LCD USING INPUT.c: 30:     {;LCD USING INPUT.c: 31:         if (RC0==1)
   426  0773  1283               	bcf	3,5	;RP0=0, select bank0
   427  0774  1303               	bcf	3,6	;RP1=0, select bank0
   428  0775  1C07               	btfss	7,0	;volatile
   429  0776  2F78               	goto	u491
   430  0777  2F79               	goto	u490
   431  0778                     u491:
   432  0778  2F9C               	goto	l38
   433  0779                     u490:
   434  0779                     l891:
   435                           
   436                           ;LCD USING INPUT.c: 32:         {;LCD USING INPUT.c: 33:             LCD(0X80,0);
   437  0779  3080               	movlw	128
   438  077A  00F9               	movwf	LCD@g
   439  077B  3000               	movlw	0
   440  077C  00FA               	movwf	LCD@g+1
   441  077D  3000               	movlw	0
   442  077E  00FB               	movwf	LCD@h
   443  077F  00FC               	movwf	LCD@h+1
   444  0780  120A  118A  2619  120A  118A  	fcall	_LCD
   445  0785                     l893:
   446                           
   447                           ;LCD USING INPUT.c: 34:             count++;
   448  0785  3001               	movlw	1
   449  0786  1283               	bcf	3,5	;RP0=0, select bank0
   450  0787  1303               	bcf	3,6	;RP1=0, select bank0
   451  0788  07A4               	addwf	_count,f
   452  0789  1803               	skipnc
   453  078A  0AA5               	incf	_count+1,f
   454  078B  3000               	movlw	0
   455  078C  07A5               	addwf	_count+1,f
   456  078D                     l895:
   457                           
   458                           ;LCD USING INPUT.c: 35:             display(count);
   459  078D  0825               	movf	_count+1,w
   460  078E  00A7               	movwf	display@a+1
   461  078F  0824               	movf	_count,w
   462  0790  00A6               	movwf	display@a
   463  0791  120A  118A  2645  120A  118A  	fcall	_display
   464  0796                     l39:	
   465                           ;LCD USING INPUT.c: 36:             while(RC0==1);
   466                           
   467  0796  1283               	bcf	3,5	;RP0=0, select bank0
   468  0797  1303               	bcf	3,6	;RP1=0, select bank0
   469  0798  1807               	btfsc	7,0	;volatile
   470  0799  2F9B               	goto	u501
   471  079A  2F9C               	goto	u500
   472  079B                     u501:
   473  079B  2F96               	goto	l39
   474  079C                     u500:
   475  079C                     l38:	
   476                           ;LCD USING INPUT.c: 37:         }
   477                           
   478                           
   479                           ;LCD USING INPUT.c: 38:         if(RC1==1)
   480  079C  1C87               	btfss	7,1	;volatile
   481  079D  2F9F               	goto	u511
   482  079E  2FA0               	goto	u510
   483  079F                     u511:
   484  079F  2FC3               	goto	l42
   485  07A0                     u510:
   486  07A0                     l897:
   487                           
   488                           ;LCD USING INPUT.c: 39:         {;LCD USING INPUT.c: 40:             LCD(0X8E,0);
   489  07A0  308E               	movlw	142
   490  07A1  00F9               	movwf	LCD@g
   491  07A2  3000               	movlw	0
   492  07A3  00FA               	movwf	LCD@g+1
   493  07A4  3000               	movlw	0
   494  07A5  00FB               	movwf	LCD@h
   495  07A6  00FC               	movwf	LCD@h+1
   496  07A7  120A  118A  2619  120A  118A  	fcall	_LCD
   497  07AC                     l899:
   498                           
   499                           ;LCD USING INPUT.c: 41:             count1++;
   500  07AC  3001               	movlw	1
   501  07AD  1283               	bcf	3,5	;RP0=0, select bank0
   502  07AE  1303               	bcf	3,6	;RP1=0, select bank0
   503  07AF  07A2               	addwf	_count1,f
   504  07B0  1803               	skipnc
   505  07B1  0AA3               	incf	_count1+1,f
   506  07B2  3000               	movlw	0
   507  07B3  07A3               	addwf	_count1+1,f
   508  07B4                     l901:
   509                           
   510                           ;LCD USING INPUT.c: 42:             display(count1);
   511  07B4  0823               	movf	_count1+1,w
   512  07B5  00A7               	movwf	display@a+1
   513  07B6  0822               	movf	_count1,w
   514  07B7  00A6               	movwf	display@a
   515  07B8  120A  118A  2645  120A  118A  	fcall	_display
   516  07BD                     l43:	
   517                           ;LCD USING INPUT.c: 43:             while(RC0==1);
   518                           
   519  07BD  1283               	bcf	3,5	;RP0=0, select bank0
   520  07BE  1303               	bcf	3,6	;RP1=0, select bank0
   521  07BF  1807               	btfsc	7,0	;volatile
   522  07C0  2FC2               	goto	u521
   523  07C1  2FC3               	goto	u520
   524  07C2                     u521:
   525  07C2  2FBD               	goto	l43
   526  07C3                     u520:
   527  07C3                     l42:	
   528                           ;LCD USING INPUT.c: 44:         }
   529                           
   530                           
   531                           ;LCD USING INPUT.c: 45:         if(RC2==1)
   532  07C3  1D07               	btfss	7,2	;volatile
   533  07C4  2FC6               	goto	u531
   534  07C5  2FC7               	goto	u530
   535  07C6                     u531:
   536  07C6  2F73               	goto	l889
   537  07C7                     u530:
   538  07C7                     l903:
   539                           
   540                           ;LCD USING INPUT.c: 46:         {;LCD USING INPUT.c: 47:             LCD(0XC7,0);
   541  07C7  30C7               	movlw	199
   542  07C8  00F9               	movwf	LCD@g
   543  07C9  3000               	movlw	0
   544  07CA  00FA               	movwf	LCD@g+1
   545  07CB  3000               	movlw	0
   546  07CC  00FB               	movwf	LCD@h
   547  07CD  00FC               	movwf	LCD@h+1
   548  07CE  120A  118A  2619  120A  118A  	fcall	_LCD
   549  07D3                     l905:
   550                           
   551                           ;LCD USING INPUT.c: 48:             total=count+count1;
   552  07D3  1283               	bcf	3,5	;RP0=0, select bank0
   553  07D4  1303               	bcf	3,6	;RP1=0, select bank0
   554  07D5  0822               	movf	_count1,w
   555  07D6  0724               	addwf	_count,w
   556  07D7  00A0               	movwf	_total
   557  07D8  0823               	movf	_count1+1,w
   558  07D9  1803               	skipnc
   559  07DA  0A23               	incf	_count1+1,w
   560  07DB  0725               	addwf	_count+1,w
   561  07DC  00A1               	movwf	_total+1
   562  07DD                     l907:
   563                           
   564                           ;LCD USING INPUT.c: 49:             display(total-1);
   565  07DD  0820               	movf	_total,w
   566  07DE  3EFF               	addlw	255
   567  07DF  00A6               	movwf	display@a
   568  07E0  0821               	movf	_total+1,w
   569  07E1  1803               	skipnc
   570  07E2  3E01               	addlw	1
   571  07E3  3EFF               	addlw	255
   572  07E4  00A7               	movwf	display@a+1
   573  07E5  120A  118A  2645  120A  118A  	fcall	_display
   574  07EA                     l47:	
   575                           ;LCD USING INPUT.c: 50:             while(RC0==1);
   576                           
   577  07EA  1283               	bcf	3,5	;RP0=0, select bank0
   578  07EB  1303               	bcf	3,6	;RP1=0, select bank0
   579  07EC  1807               	btfsc	7,0	;volatile
   580  07ED  2FEF               	goto	u541
   581  07EE  2FF0               	goto	u540
   582  07EF                     u541:
   583  07EF  2FEA               	goto	l47
   584  07F0                     u540:
   585  07F0  2F73               	goto	l889
   586  07F1  120A  118A  2800   	ljmp	start
   587  07F4                     __end_of_main:
   588                           
   589                           	psect	text1
   590  0645                     __ptext1:	
   591 ;; *************** function _display *****************
   592 ;; Defined at:
   593 ;;		line 68 in file "LCD USING INPUT.c"
   594 ;; Parameters:    Size  Location     Type
   595 ;;  a               2    0[BANK0 ] int 
   596 ;; Auto vars:     Size  Location     Type
   597 ;;		None
   598 ;; Return value:  Size  Location     Type
   599 ;;                  1    wreg      void 
   600 ;; Registers used:
   601 ;;		wreg, status,2, status,0, pclath, cstack
   602 ;; Tracked objects:
   603 ;;		On entry : 0/0
   604 ;;		On exit  : 0/0
   605 ;;		Unchanged: 0/0
   606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   607 ;;      Params:         0       2       0       0       0
   608 ;;      Locals:         0       0       0       0       0
   609 ;;      Temps:          0       0       0       0       0
   610 ;;      Totals:         0       2       0       0       0
   611 ;;Total ram usage:        2 bytes
   612 ;; Hardware stack levels used: 1
   613 ;; Hardware stack levels required when called: 2
   614 ;; This function calls:
   615 ;;		_LCD
   616 ;;		___awdiv
   617 ;;		___awmod
   618 ;; This function is called by:
   619 ;;		_main
   620 ;; This function uses a non-reentrant model
   621 ;;
   622                           
   623                           
   624                           ;psect for function _display
   625  0645                     _display:
   626  0645                     l875:	
   627                           ;incstack = 0
   628                           ; Regs used in _display: [wreg+status,2+status,0+pclath+cstack]
   629                           
   630                           
   631                           ;LCD USING INPUT.c: 68: void display(int a);LCD USING INPUT.c: 69: {;LCD USING INPUT.c: 
      +                          70:     LCD((0x30+(a-1)/10),1);
   632  0645  300A               	movlw	10
   633  0646  00F0               	movwf	___awdiv@divisor
   634  0647  3000               	movlw	0
   635  0648  00F1               	movwf	___awdiv@divisor+1
   636  0649  1283               	bcf	3,5	;RP0=0, select bank0
   637  064A  1303               	bcf	3,6	;RP1=0, select bank0
   638  064B  0826               	movf	display@a,w
   639  064C  3EFF               	addlw	255
   640  064D  00F2               	movwf	___awdiv@dividend
   641  064E  0827               	movf	display@a+1,w
   642  064F  1803               	skipnc
   643  0650  3E01               	addlw	1
   644  0651  3EFF               	addlw	255
   645  0652  00F3               	movwf	___awdiv@dividend+1
   646  0653  120A  118A  26E7  120A  118A  	fcall	___awdiv
   647  0658  0870               	movf	?___awdiv,w
   648  0659  3E30               	addlw	48
   649  065A  00F9               	movwf	LCD@g
   650  065B  0871               	movf	?___awdiv+1,w
   651  065C  1803               	skipnc
   652  065D  3E01               	addlw	1
   653  065E  3E00               	addlw	0
   654  065F  00FA               	movwf	LCD@g+1
   655  0660  3001               	movlw	1
   656  0661  00FB               	movwf	LCD@h
   657  0662  3000               	movlw	0
   658  0663  00FC               	movwf	LCD@h+1
   659  0664  120A  118A  2619  120A  118A  	fcall	_LCD
   660                           
   661                           ;LCD USING INPUT.c: 71:     LCD((0x30+(a-1)%10),1);
   662  0669  300A               	movlw	10
   663  066A  00F0               	movwf	___awmod@divisor
   664  066B  3000               	movlw	0
   665  066C  00F1               	movwf	___awmod@divisor+1
   666  066D  1283               	bcf	3,5	;RP0=0, select bank0
   667  066E  1303               	bcf	3,6	;RP1=0, select bank0
   668  066F  0826               	movf	display@a,w
   669  0670  3EFF               	addlw	255
   670  0671  00F2               	movwf	___awmod@dividend
   671  0672  0827               	movf	display@a+1,w
   672  0673  1803               	skipnc
   673  0674  3E01               	addlw	1
   674  0675  3EFF               	addlw	255
   675  0676  00F3               	movwf	___awmod@dividend+1
   676  0677  120A  118A  268E  120A  118A  	fcall	___awmod
   677  067C  0870               	movf	?___awmod,w
   678  067D  3E30               	addlw	48
   679  067E  00F9               	movwf	LCD@g
   680  067F  0871               	movf	?___awmod+1,w
   681  0680  1803               	skipnc
   682  0681  3E01               	addlw	1
   683  0682  3E00               	addlw	0
   684  0683  00FA               	movwf	LCD@g+1
   685  0684  3001               	movlw	1
   686  0685  00FB               	movwf	LCD@h
   687  0686  3000               	movlw	0
   688  0687  00FC               	movwf	LCD@h+1
   689  0688  120A  118A  2619  120A  118A  	fcall	_LCD
   690  068D                     l61:
   691  068D  0008               	return
   692  068E                     __end_of_display:
   693                           
   694                           	psect	text2
   695  068E                     __ptext2:	
   696 ;; *************** function ___awmod *****************
   697 ;; Defined at:
   698 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awmod.c"
   699 ;; Parameters:    Size  Location     Type
   700 ;;  divisor         2    0[COMMON] int 
   701 ;;  dividend        2    2[COMMON] int 
   702 ;; Auto vars:     Size  Location     Type
   703 ;;  sign            1    6[COMMON] unsigned char 
   704 ;;  counter         1    5[COMMON] unsigned char 
   705 ;; Return value:  Size  Location     Type
   706 ;;                  2    0[COMMON] int 
   707 ;; Registers used:
   708 ;;		wreg, status,2, status,0
   709 ;; Tracked objects:
   710 ;;		On entry : 0/0
   711 ;;		On exit  : 0/0
   712 ;;		Unchanged: 0/0
   713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   714 ;;      Params:         4       0       0       0       0
   715 ;;      Locals:         2       0       0       0       0
   716 ;;      Temps:          1       0       0       0       0
   717 ;;      Totals:         7       0       0       0       0
   718 ;;Total ram usage:        7 bytes
   719 ;; Hardware stack levels used: 1
   720 ;; This function calls:
   721 ;;		Nothing
   722 ;; This function is called by:
   723 ;;		_display
   724 ;; This function uses a non-reentrant model
   725 ;;
   726                           
   727                           
   728                           ;psect for function ___awmod
   729  068E                     ___awmod:
   730  068E                     l837:	
   731                           ;incstack = 0
   732                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   733                           
   734  068E  01F6               	clrf	___awmod@sign
   735  068F                     l839:
   736  068F  1FF3               	btfss	___awmod@dividend+1,7
   737  0690  2E92               	goto	u401
   738  0691  2E93               	goto	u400
   739  0692                     u401:
   740  0692  2E9A               	goto	l845
   741  0693                     u400:
   742  0693                     l841:
   743  0693  09F2               	comf	___awmod@dividend,f
   744  0694  09F3               	comf	___awmod@dividend+1,f
   745  0695  0AF2               	incf	___awmod@dividend,f
   746  0696  1903               	skipnz
   747  0697  0AF3               	incf	___awmod@dividend+1,f
   748  0698                     l843:
   749  0698  01F6               	clrf	___awmod@sign
   750  0699  0AF6               	incf	___awmod@sign,f
   751  069A                     l845:
   752  069A  1FF1               	btfss	___awmod@divisor+1,7
   753  069B  2E9D               	goto	u411
   754  069C  2E9E               	goto	u410
   755  069D                     u411:
   756  069D  2EA3               	goto	l849
   757  069E                     u410:
   758  069E                     l847:
   759  069E  09F0               	comf	___awmod@divisor,f
   760  069F  09F1               	comf	___awmod@divisor+1,f
   761  06A0  0AF0               	incf	___awmod@divisor,f
   762  06A1  1903               	skipnz
   763  06A2  0AF1               	incf	___awmod@divisor+1,f
   764  06A3                     l849:
   765  06A3  0870               	movf	___awmod@divisor,w
   766  06A4  0471               	iorwf	___awmod@divisor+1,w
   767  06A5  1903               	btfsc	3,2
   768  06A6  2EA8               	goto	u421
   769  06A7  2EA9               	goto	u420
   770  06A8                     u421:
   771  06A8  2ED8               	goto	l867
   772  06A9                     u420:
   773  06A9                     l851:
   774  06A9  01F5               	clrf	___awmod@counter
   775  06AA  0AF5               	incf	___awmod@counter,f
   776  06AB  2EB7               	goto	l857
   777  06AC                     l853:
   778  06AC  3001               	movlw	1
   779  06AD                     u435:
   780  06AD  1003               	clrc
   781  06AE  0DF0               	rlf	___awmod@divisor,f
   782  06AF  0DF1               	rlf	___awmod@divisor+1,f
   783  06B0  3EFF               	addlw	-1
   784  06B1  1D03               	skipz
   785  06B2  2EAD               	goto	u435
   786  06B3                     l855:
   787  06B3  3001               	movlw	1
   788  06B4  00F4               	movwf	??___awmod
   789  06B5  0874               	movf	??___awmod,w
   790  06B6  07F5               	addwf	___awmod@counter,f
   791  06B7                     l857:
   792  06B7  1FF1               	btfss	___awmod@divisor+1,7
   793  06B8  2EBA               	goto	u441
   794  06B9  2EBB               	goto	u440
   795  06BA                     u441:
   796  06BA  2EAC               	goto	l853
   797  06BB                     u440:
   798  06BB                     l859:
   799  06BB  0871               	movf	___awmod@divisor+1,w
   800  06BC  0273               	subwf	___awmod@dividend+1,w
   801  06BD  1D03               	skipz
   802  06BE  2EC1               	goto	u455
   803  06BF  0870               	movf	___awmod@divisor,w
   804  06C0  0272               	subwf	___awmod@dividend,w
   805  06C1                     u455:
   806  06C1  1C03               	skipc
   807  06C2  2EC4               	goto	u451
   808  06C3  2EC5               	goto	u450
   809  06C4                     u451:
   810  06C4  2ECB               	goto	l863
   811  06C5                     u450:
   812  06C5                     l861:
   813  06C5  0870               	movf	___awmod@divisor,w
   814  06C6  02F2               	subwf	___awmod@dividend,f
   815  06C7  0871               	movf	___awmod@divisor+1,w
   816  06C8  1C03               	skipc
   817  06C9  03F3               	decf	___awmod@dividend+1,f
   818  06CA  02F3               	subwf	___awmod@dividend+1,f
   819  06CB                     l863:
   820  06CB  3001               	movlw	1
   821  06CC                     u465:
   822  06CC  1003               	clrc
   823  06CD  0CF1               	rrf	___awmod@divisor+1,f
   824  06CE  0CF0               	rrf	___awmod@divisor,f
   825  06CF  3EFF               	addlw	-1
   826  06D0  1D03               	skipz
   827  06D1  2ECC               	goto	u465
   828  06D2                     l865:
   829  06D2  3001               	movlw	1
   830  06D3  02F5               	subwf	___awmod@counter,f
   831  06D4  1D03               	btfss	3,2
   832  06D5  2ED7               	goto	u471
   833  06D6  2ED8               	goto	u470
   834  06D7                     u471:
   835  06D7  2EBB               	goto	l859
   836  06D8                     u470:
   837  06D8                     l867:
   838  06D8  0876               	movf	___awmod@sign,w
   839  06D9  1903               	btfsc	3,2
   840  06DA  2EDC               	goto	u481
   841  06DB  2EDD               	goto	u480
   842  06DC                     u481:
   843  06DC  2EE2               	goto	l871
   844  06DD                     u480:
   845  06DD                     l869:
   846  06DD  09F2               	comf	___awmod@dividend,f
   847  06DE  09F3               	comf	___awmod@dividend+1,f
   848  06DF  0AF2               	incf	___awmod@dividend,f
   849  06E0  1903               	skipnz
   850  06E1  0AF3               	incf	___awmod@dividend+1,f
   851  06E2                     l871:
   852  06E2  0873               	movf	___awmod@dividend+1,w
   853  06E3  00F1               	movwf	?___awmod+1
   854  06E4  0872               	movf	___awmod@dividend,w
   855  06E5  00F0               	movwf	?___awmod
   856  06E6                     l313:
   857  06E6  0008               	return
   858  06E7                     __end_of___awmod:
   859                           
   860                           	psect	text3
   861  06E7                     __ptext3:	
   862 ;; *************** function ___awdiv *****************
   863 ;; Defined at:
   864 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\awdiv.c"
   865 ;; Parameters:    Size  Location     Type
   866 ;;  divisor         2    0[COMMON] int 
   867 ;;  dividend        2    2[COMMON] int 
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  quotient        2    7[COMMON] int 
   870 ;;  sign            1    6[COMMON] unsigned char 
   871 ;;  counter         1    5[COMMON] unsigned char 
   872 ;; Return value:  Size  Location     Type
   873 ;;                  2    0[COMMON] int 
   874 ;; Registers used:
   875 ;;		wreg, status,2, status,0
   876 ;; Tracked objects:
   877 ;;		On entry : 0/0
   878 ;;		On exit  : 0/0
   879 ;;		Unchanged: 0/0
   880 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   881 ;;      Params:         4       0       0       0       0
   882 ;;      Locals:         4       0       0       0       0
   883 ;;      Temps:          1       0       0       0       0
   884 ;;      Totals:         9       0       0       0       0
   885 ;;Total ram usage:        9 bytes
   886 ;; Hardware stack levels used: 1
   887 ;; This function calls:
   888 ;;		Nothing
   889 ;; This function is called by:
   890 ;;		_display
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894                           
   895                           ;psect for function ___awdiv
   896  06E7                     ___awdiv:
   897  06E7                     l793:	
   898                           ;incstack = 0
   899                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   900                           
   901  06E7  01F6               	clrf	___awdiv@sign
   902  06E8                     l795:
   903  06E8  1FF1               	btfss	___awdiv@divisor+1,7
   904  06E9  2EEB               	goto	u301
   905  06EA  2EEC               	goto	u300
   906  06EB                     u301:
   907  06EB  2EF3               	goto	l801
   908  06EC                     u300:
   909  06EC                     l797:
   910  06EC  09F0               	comf	___awdiv@divisor,f
   911  06ED  09F1               	comf	___awdiv@divisor+1,f
   912  06EE  0AF0               	incf	___awdiv@divisor,f
   913  06EF  1903               	skipnz
   914  06F0  0AF1               	incf	___awdiv@divisor+1,f
   915  06F1                     l799:
   916  06F1  01F6               	clrf	___awdiv@sign
   917  06F2  0AF6               	incf	___awdiv@sign,f
   918  06F3                     l801:
   919  06F3  1FF3               	btfss	___awdiv@dividend+1,7
   920  06F4  2EF6               	goto	u311
   921  06F5  2EF7               	goto	u310
   922  06F6                     u311:
   923  06F6  2F00               	goto	l807
   924  06F7                     u310:
   925  06F7                     l803:
   926  06F7  09F2               	comf	___awdiv@dividend,f
   927  06F8  09F3               	comf	___awdiv@dividend+1,f
   928  06F9  0AF2               	incf	___awdiv@dividend,f
   929  06FA  1903               	skipnz
   930  06FB  0AF3               	incf	___awdiv@dividend+1,f
   931  06FC                     l805:
   932  06FC  3001               	movlw	1
   933  06FD  00F4               	movwf	??___awdiv
   934  06FE  0874               	movf	??___awdiv,w
   935  06FF  06F6               	xorwf	___awdiv@sign,f
   936  0700                     l807:
   937  0700  01F7               	clrf	___awdiv@quotient
   938  0701  01F8               	clrf	___awdiv@quotient+1
   939  0702                     l809:
   940  0702  0870               	movf	___awdiv@divisor,w
   941  0703  0471               	iorwf	___awdiv@divisor+1,w
   942  0704  1903               	btfsc	3,2
   943  0705  2F07               	goto	u321
   944  0706  2F08               	goto	u320
   945  0707                     u321:
   946  0707  2F3F               	goto	l829
   947  0708                     u320:
   948  0708                     l811:
   949  0708  01F5               	clrf	___awdiv@counter
   950  0709  0AF5               	incf	___awdiv@counter,f
   951  070A  2F16               	goto	l817
   952  070B                     l813:
   953  070B  3001               	movlw	1
   954  070C                     u335:
   955  070C  1003               	clrc
   956  070D  0DF0               	rlf	___awdiv@divisor,f
   957  070E  0DF1               	rlf	___awdiv@divisor+1,f
   958  070F  3EFF               	addlw	-1
   959  0710  1D03               	skipz
   960  0711  2F0C               	goto	u335
   961  0712                     l815:
   962  0712  3001               	movlw	1
   963  0713  00F4               	movwf	??___awdiv
   964  0714  0874               	movf	??___awdiv,w
   965  0715  07F5               	addwf	___awdiv@counter,f
   966  0716                     l817:
   967  0716  1FF1               	btfss	___awdiv@divisor+1,7
   968  0717  2F19               	goto	u341
   969  0718  2F1A               	goto	u340
   970  0719                     u341:
   971  0719  2F0B               	goto	l813
   972  071A                     u340:
   973  071A                     l819:
   974  071A  3001               	movlw	1
   975  071B                     u355:
   976  071B  1003               	clrc
   977  071C  0DF7               	rlf	___awdiv@quotient,f
   978  071D  0DF8               	rlf	___awdiv@quotient+1,f
   979  071E  3EFF               	addlw	-1
   980  071F  1D03               	skipz
   981  0720  2F1B               	goto	u355
   982  0721  0871               	movf	___awdiv@divisor+1,w
   983  0722  0273               	subwf	___awdiv@dividend+1,w
   984  0723  1D03               	skipz
   985  0724  2F27               	goto	u365
   986  0725  0870               	movf	___awdiv@divisor,w
   987  0726  0272               	subwf	___awdiv@dividend,w
   988  0727                     u365:
   989  0727  1C03               	skipc
   990  0728  2F2A               	goto	u361
   991  0729  2F2B               	goto	u360
   992  072A                     u361:
   993  072A  2F32               	goto	l825
   994  072B                     u360:
   995  072B                     l821:
   996  072B  0870               	movf	___awdiv@divisor,w
   997  072C  02F2               	subwf	___awdiv@dividend,f
   998  072D  0871               	movf	___awdiv@divisor+1,w
   999  072E  1C03               	skipc
  1000  072F  03F3               	decf	___awdiv@dividend+1,f
  1001  0730  02F3               	subwf	___awdiv@dividend+1,f
  1002  0731                     l823:
  1003  0731  1477               	bsf	___awdiv@quotient,0
  1004  0732                     l825:
  1005  0732  3001               	movlw	1
  1006  0733                     u375:
  1007  0733  1003               	clrc
  1008  0734  0CF1               	rrf	___awdiv@divisor+1,f
  1009  0735  0CF0               	rrf	___awdiv@divisor,f
  1010  0736  3EFF               	addlw	-1
  1011  0737  1D03               	skipz
  1012  0738  2F33               	goto	u375
  1013  0739                     l827:
  1014  0739  3001               	movlw	1
  1015  073A  02F5               	subwf	___awdiv@counter,f
  1016  073B  1D03               	btfss	3,2
  1017  073C  2F3E               	goto	u381
  1018  073D  2F3F               	goto	u380
  1019  073E                     u381:
  1020  073E  2F1A               	goto	l819
  1021  073F                     u380:
  1022  073F                     l829:
  1023  073F  0876               	movf	___awdiv@sign,w
  1024  0740  1903               	btfsc	3,2
  1025  0741  2F43               	goto	u391
  1026  0742  2F44               	goto	u390
  1027  0743                     u391:
  1028  0743  2F49               	goto	l833
  1029  0744                     u390:
  1030  0744                     l831:
  1031  0744  09F7               	comf	___awdiv@quotient,f
  1032  0745  09F8               	comf	___awdiv@quotient+1,f
  1033  0746  0AF7               	incf	___awdiv@quotient,f
  1034  0747  1903               	skipnz
  1035  0748  0AF8               	incf	___awdiv@quotient+1,f
  1036  0749                     l833:
  1037  0749  0878               	movf	___awdiv@quotient+1,w
  1038  074A  00F1               	movwf	?___awdiv+1
  1039  074B  0877               	movf	___awdiv@quotient,w
  1040  074C  00F0               	movwf	?___awdiv
  1041  074D                     l300:
  1042  074D  0008               	return
  1043  074E                     __end_of___awdiv:
  1044                           
  1045                           	psect	text4
  1046  0619                     __ptext4:	
  1047 ;; *************** function _LCD *****************
  1048 ;; Defined at:
  1049 ;;		line 61 in file "LCD USING INPUT.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;  g               2    9[COMMON] int 
  1052 ;;  h               2   11[COMMON] int 
  1053 ;; Auto vars:     Size  Location     Type
  1054 ;;		None
  1055 ;; Return value:  Size  Location     Type
  1056 ;;                  1    wreg      void 
  1057 ;; Registers used:
  1058 ;;		wreg, status,2, status,0, pclath, cstack
  1059 ;; Tracked objects:
  1060 ;;		On entry : 0/0
  1061 ;;		On exit  : 0/0
  1062 ;;		Unchanged: 0/0
  1063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1064 ;;      Params:         4       0       0       0       0
  1065 ;;      Locals:         0       0       0       0       0
  1066 ;;      Temps:          0       0       0       0       0
  1067 ;;      Totals:         4       0       0       0       0
  1068 ;;Total ram usage:        4 bytes
  1069 ;; Hardware stack levels used: 1
  1070 ;; Hardware stack levels required when called: 1
  1071 ;; This function calls:
  1072 ;;		_pulse
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;;		_display
  1076 ;; This function uses a non-reentrant model
  1077 ;;
  1078                           
  1079                           
  1080                           ;psect for function _LCD
  1081  0619                     _LCD:
  1082  0619                     l787:	
  1083                           ;incstack = 0
  1084                           ; Regs used in _LCD: [wreg+status,2+status,0+pclath+cstack]
  1085                           
  1086                           
  1087                           ;LCD USING INPUT.c: 61: void LCD(int g,int h);LCD USING INPUT.c: 62: {;LCD USING INPUT.c
      +                          : 63:     RC5=h;
  1088  0619  187B               	btfsc	LCD@h,0
  1089  061A  2E1C               	goto	u281
  1090  061B  2E20               	goto	u280
  1091  061C                     u281:
  1092  061C  1283               	bcf	3,5	;RP0=0, select bank0
  1093  061D  1303               	bcf	3,6	;RP1=0, select bank0
  1094  061E  1687               	bsf	7,5	;volatile
  1095  061F  2E23               	goto	u294
  1096  0620                     u280:
  1097  0620  1283               	bcf	3,5	;RP0=0, select bank0
  1098  0621  1303               	bcf	3,6	;RP1=0, select bank0
  1099  0622  1287               	bcf	7,5	;volatile
  1100  0623                     u294:
  1101                           
  1102                           ;LCD USING INPUT.c: 64:     RC6=0;
  1103  0623  1307               	bcf	7,6	;volatile
  1104  0624                     l789:
  1105                           
  1106                           ;LCD USING INPUT.c: 65:     PORTD=g;
  1107  0624  0879               	movf	LCD@g,w
  1108  0625  0088               	movwf	8	;volatile
  1109  0626                     l791:
  1110                           
  1111                           ;LCD USING INPUT.c: 66:     pulse();
  1112  0626  120A  118A  262C  120A  118A  	fcall	_pulse
  1113  062B                     l58:
  1114  062B  0008               	return
  1115  062C                     __end_of_LCD:
  1116                           
  1117                           	psect	text5
  1118  062C                     __ptext5:	
  1119 ;; *************** function _pulse *****************
  1120 ;; Defined at:
  1121 ;;		line 54 in file "LCD USING INPUT.c"
  1122 ;; Parameters:    Size  Location     Type
  1123 ;;		None
  1124 ;; Auto vars:     Size  Location     Type
  1125 ;;		None
  1126 ;; Return value:  Size  Location     Type
  1127 ;;                  1    wreg      void 
  1128 ;; Registers used:
  1129 ;;		wreg
  1130 ;; Tracked objects:
  1131 ;;		On entry : 0/0
  1132 ;;		On exit  : 0/0
  1133 ;;		Unchanged: 0/0
  1134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1135 ;;      Params:         0       0       0       0       0
  1136 ;;      Locals:         0       0       0       0       0
  1137 ;;      Temps:          2       0       0       0       0
  1138 ;;      Totals:         2       0       0       0       0
  1139 ;;Total ram usage:        2 bytes
  1140 ;; Hardware stack levels used: 1
  1141 ;; This function calls:
  1142 ;;		Nothing
  1143 ;; This function is called by:
  1144 ;;		_LCD
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147                           
  1148                           
  1149                           ;psect for function _pulse
  1150  062C                     _pulse:
  1151  062C                     l781:	
  1152                           ;incstack = 0
  1153                           ; Regs used in _pulse: [wreg]
  1154                           
  1155                           
  1156                           ;LCD USING INPUT.c: 56:     RC7=1;
  1157  062C  1283               	bcf	3,5	;RP0=0, select bank0
  1158  062D  1303               	bcf	3,6	;RP1=0, select bank0
  1159  062E  1787               	bsf	7,7	;volatile
  1160  062F                     l783:
  1161                           
  1162                           ;LCD USING INPUT.c: 57:     _delay((unsigned long)((500)*(400000/4000.0)));
  1163  062F  3041               	movlw	65
  1164  0630  00F1               	movwf	??_pulse+1
  1165  0631  30EE               	movlw	238
  1166  0632  00F0               	movwf	??_pulse
  1167  0633                     u557:
  1168  0633  0BF0               	decfsz	??_pulse,f
  1169  0634  2E33               	goto	u557
  1170  0635  0BF1               	decfsz	??_pulse+1,f
  1171  0636  2E33               	goto	u557
  1172  0637  0000               	nop
  1173  0638                     l785:
  1174                           
  1175                           ;LCD USING INPUT.c: 58:     RC7=0;
  1176  0638  1283               	bcf	3,5	;RP0=0, select bank0
  1177  0639  1303               	bcf	3,6	;RP1=0, select bank0
  1178  063A  1387               	bcf	7,7	;volatile
  1179                           
  1180                           ;LCD USING INPUT.c: 59:     _delay((unsigned long)((500)*(400000/4000.0)));
  1181  063B  3041               	movlw	65
  1182  063C  00F1               	movwf	??_pulse+1
  1183  063D  30EE               	movlw	238
  1184  063E  00F0               	movwf	??_pulse
  1185  063F                     u567:
  1186  063F  0BF0               	decfsz	??_pulse,f
  1187  0640  2E3F               	goto	u567
  1188  0641  0BF1               	decfsz	??_pulse+1,f
  1189  0642  2E3F               	goto	u567
  1190  0643  0000               	nop
  1191  0644                     l55:
  1192  0644  0008               	return
  1193  0645                     __end_of_pulse:
  1194  007E                     btemp	set	126	;btemp
  1195  007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     13      13
    BANK0            80      2       8
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_LCD
    _display->_LCD
    _LCD->___awdiv

Critical Paths under _main in BANK0

    _main->_display

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0    3388
                                _LCD
                            _display
 ---------------------------------------------------------------------------------
 (1) _display                                              2     0      2    2280
                                              0 BANK0      2     0      2
                                _LCD
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              7     3      4     448
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (2) _LCD                                                  4     0      4    1108
                                              9 COMMON     4     0      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
                              _pulse
 ---------------------------------------------------------------------------------
 (3) _pulse                                                2     2      0       0
                                              0 COMMON     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LCD
     ___awdiv (ARG)
     ___awmod (ARG)
     _pulse (ARG)
   _display
     _LCD
     ___awdiv
     ___awmod

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      D       D       1       92.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      15       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      2       8       5       10.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      15      12        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Mar 20 15:31:32 2023

                     l42 07C3                       l43 07BD                       l61 068D  
                     l38 079C                       l55 0644                       l47 07EA  
                     l39 0796                       l58 062B             ___awdiv@sign 0076  
                    l300 074D                      l313 06E6                      l801 06F3  
                    l811 0708                      l803 06F7                      l821 072B  
                    l813 070B                      l805 06FC                      l901 07B4  
                    l831 0744                      l823 0731                      l815 0712  
                    l807 0700                      l903 07C7                      l833 0749  
                    l825 0732                      l817 0716                      l809 0702  
                    l841 0693                      l905 07D3                      l827 0739  
                    l819 071A                      l851 06A9                      l843 0698  
                    l907 07DD                      l781 062C                      l829 073F  
                    l861 06C5                      l853 06AC                      l845 069A  
                    l837 068E                      l783 062F                      l791 0626  
                    l871 06E2                      l863 06CB                      l855 06B3  
                    l847 069E                      l839 068F                      l785 0638  
                    l793 06E7                      l865 06D2                      l857 06B7  
                    l849 06A3                      l881 0755                      l787 0619  
                    l795 06E8                      l859 06BB                      l867 06D8  
                    l875 0645                      l891 0779                      l883 0758  
                    l789 0624                      l797 06EC                      l869 06DD  
                    l893 0785                      l885 075B                      l877 074E  
                    l799 06F1                      l895 078D                      l887 0767  
                    l879 0752                      l897 07A0                      l889 0773  
                    l899 07AC                      _LCD 0619                      _RC0 0038  
                    _RC1 0039                      _RC2 003A                      _RC5 003D  
                    _RC6 003E                      _RC7 003F                      u300 06EC  
                    u301 06EB                      u310 06F7                      u311 06F6  
                    u320 0708                      u400 0693                      u321 0707  
                    u401 0692                      u410 069E                      u411 069D  
                    u340 071A                      u420 06A9                      u500 079C  
                    u341 0719                      u421 06A8                      u501 079B  
                    u510 07A0                      u335 070C                      u511 079F  
                    u280 0620                      u360 072B                      u440 06BB  
                    u520 07C3                      u281 061C                      u361 072A  
                    u441 06BA                      u521 07C2                      u450 06C5  
                    u530 07C7                      u355 071B                      u451 06C4  
                    u435 06AD                      u531 07C6                      u380 073F  
                    u540 07F0                      u381 073E                      u365 0727  
                    u541 07EF                      u294 0623                      u390 0744  
                    u470 06D8                      u391 0743                      u375 0733  
                    u471 06D7                      u455 06C1                      u480 06DD  
                    u481 06DC                      u465 06CC                      u490 0779  
                    u491 0778                      u557 0633                      u567 063F  
           ___awmod@sign 0076                     LCD@g 0079                     LCD@h 007B  
                   ?_LCD 0079                     _main 074E                     btemp 007E  
                   start 0000                    ??_LCD 007D                    ?_main 0070  
        __end_of___awdiv 074E          __end_of___awmod 06E7          ___awdiv@divisor 0070  
        ___awdiv@counter 0075                    _PORTC 0007                    _PORTD 0008  
                  _TRISC 0087                    _TRISD 0088          __end_of_display 068E  
                  _count 0024                    _pulse 062C                    _total 0020  
                  status 0003                    wtemp0 007E          __initialization 07F4  
           __end_of_main 07F4                   ??_main 007D         ___awdiv@dividend 0072  
                 ?_pulse 0070                ??___awdiv 0074                ??___awmod 0074  
                 _count1 0022         ___awdiv@quotient 0077          ___awmod@divisor 0070  
        ___awmod@counter 0075                ??_display 007D  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_pulse 0645                  ??_pulse 0070  
             __pbssBANK0 0020               __pmaintext 074E                  ___awdiv 06E7  
                ___awmod 068E                  __ptext1 0645                  __ptext2 068E  
                __ptext3 06E7                  __ptext4 0619                  __ptext5 062C  
                _display 0645             __size_of_LCD 0013         ___awmod@dividend 0072  
   end_of_initialization 07FC      start_initialization 07F4              __end_of_LCD 062C  
              ___latbits 0002            __pcstackBANK0 0026                 ?___awdiv 0070  
               ?___awmod 0070                 ?_display 0026           __size_of_pulse 0019  
       __size_of___awdiv 0067         __size_of___awmod 0059         __size_of_display 0049  
          __size_of_main 00A6                 display@a 0026  
